use std::ops::{Deref, DerefMut};

// There's really no advantage to doing this. You may as well write a new trait and
// implement it for String. Interesting experiment though.

/// MyString "inherits" String by way of abusing deref
struct MyString {
    child: Vec<String>
}

impl Deref for MyString {
    type Target = Vec<String>;

    fn deref(&self) -> &Self::Target {
        &self.child
    }
}

impl DerefMut for MyString {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.child
    }
}

fn main() {
    println!("Hello, world!");
    let mut example = MyString {
        child: vec![String::from("One"), String::from("Two")]
    };

    // Note that I can use .pop() on example, even though the MyString struct defines no such
    // method.
    println!("It is {}", example.pop().expect("Must exist."));
}
